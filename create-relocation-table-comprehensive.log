%%%% Starting test create-relocation-table-comprehensive
Group begin: create-relocation-table-comprehensive
Test begin:
  test-name: "relocation table should have the correct size for one entry"
  source-file: "test-relocation-table.scm"
  source-line: 31
  source-form: (test-assert "relocation table should have the correct size for one entry" (= 24 (bytevector-length table)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_offset should be correct for the first entry"
  source-file: "test-relocation-table.scm"
  source-line: 33
  source-form: (test-assert "r_offset should be correct for the first entry" (= 4096 (bytevector-u64-ref table 0 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_info should be correct for the first entry"
  source-file: "test-relocation-table.scm"
  source-line: 35
  source-form: (test-assert "r_info should be correct for the first entry" (= 4294967297 (bytevector-u64-ref table 8 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_addend should be zero for the first entry"
  source-file: "test-relocation-table.scm"
  source-line: 37
  source-form: (test-assert "r_addend should be zero for the first entry" (= 0 (bytevector-u64-ref table 16 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "relocation table should have the correct size for one entry"
  source-file: "test-relocation-table.scm"
  source-line: 44
  source-form: (test-assert "relocation table should have the correct size for one entry" (= 24 (bytevector-length table)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_offset should be correct for the first entry"
  source-file: "test-relocation-table.scm"
  source-line: 46
  source-form: (test-assert "r_offset should be correct for the first entry" (= 8192 (bytevector-u64-ref table 0 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_info should be correct for the first entry"
  source-file: "test-relocation-table.scm"
  source-line: 48
  source-form: (test-assert "r_info should be correct for the first entry" (= 4294967297 (bytevector-u64-ref table 8 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_addend should be zero for the first entry"
  source-file: "test-relocation-table.scm"
  source-line: 50
  source-form: (test-assert "r_addend should be zero for the first entry" (= 0 (bytevector-u64-ref table 16 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "relocation table should have the correct size for three entries"
  source-file: "test-relocation-table.scm"
  source-line: 59
  source-form: (test-assert "relocation table should have the correct size for three entries" (= 72 (bytevector-length table)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_offset should be correct for the first entry"
  source-file: "test-relocation-table.scm"
  source-line: 63
  source-form: (test-assert "r_offset should be correct for the first entry" (= 4096 (bytevector-u64-ref table 0 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_info should be correct for the first entry"
  source-file: "test-relocation-table.scm"
  source-line: 65
  source-form: (test-assert "r_info should be correct for the first entry" (= 4294967297 (bytevector-u64-ref table 8 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_addend should be zero for the first entry"
  source-file: "test-relocation-table.scm"
  source-line: 67
  source-form: (test-assert "r_addend should be zero for the first entry" (= 0 (bytevector-u64-ref table 16 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_offset should be correct for the second entry"
  source-file: "test-relocation-table.scm"
  source-line: 71
  source-form: (test-assert "r_offset should be correct for the second entry" (= 8192 (bytevector-u64-ref table 24 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_info should be correct for the second entry"
  source-file: "test-relocation-table.scm"
  source-line: 73
  source-form: (test-assert "r_info should be correct for the second entry" (= 8589934594 (bytevector-u64-ref table 32 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_addend should be zero for the second entry"
  source-file: "test-relocation-table.scm"
  source-line: 75
  source-form: (test-assert "r_addend should be zero for the second entry" (= 0 (bytevector-u64-ref table 40 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_offset should be correct for the third entry"
  source-file: "test-relocation-table.scm"
  source-line: 79
  source-form: (test-assert "r_offset should be correct for the third entry" (= 12288 (bytevector-u64-ref table 48 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_info should be correct for the third entry"
  source-file: "test-relocation-table.scm"
  source-line: 81
  source-form: (test-assert "r_info should be correct for the third entry" (= 12884901891 (bytevector-u64-ref table 56 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_addend should be zero for the third entry"
  source-file: "test-relocation-table.scm"
  source-line: 83
  source-form: (test-assert "r_addend should be zero for the third entry" (= 0 (bytevector-u64-ref table 64 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "relocation table should have the correct size with custom entry size"
  source-file: "test-relocation-table.scm"
  source-line: 96
  source-form: (test-assert "relocation table should have the correct size with custom entry size" (= 32 (bytevector-length table)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_offset should be correct with custom offset"
  source-file: "test-relocation-table.scm"
  source-line: 105
  source-form: (test-assert "r_offset should be correct with custom offset" (= 4096 r-offset))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_info should be correct with custom offset and type"
  source-file: "test-relocation-table.scm"
  source-line: 107
  source-form: (test-assert "r_info should be correct with custom offset and type" (= 4294967297 r-info))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_addend should be zero with custom offset"
  source-file: "test-relocation-table.scm"
  source-line: 109
  source-form: (test-assert "r_addend should be zero with custom offset" (= 0 r-addend))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "relocation table should have the correct size for four entries"
  source-file: "test-relocation-table.scm"
  source-line: 124
  source-form: (test-assert "relocation table should have the correct size for four entries" (= 96 (bytevector-length table)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_offset should be correct for the first entry"
  source-file: "test-relocation-table.scm"
  source-line: 128
  source-form: (test-assert "r_offset should be correct for the first entry" (= 0 (bytevector-u64-ref table 0 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_info should be correct for the first entry (R_X86_64_64)"
  source-file: "test-relocation-table.scm"
  source-line: 130
  source-form: (test-assert "r_info should be correct for the first entry (R_X86_64_64)" (= 4294967297 (bytevector-u64-ref table 8 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_addend should be zero for the first entry"
  source-file: "test-relocation-table.scm"
  source-line: 132
  source-form: (test-assert "r_addend should be zero for the first entry" (= 0 (bytevector-u64-ref table 16 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_offset should be correct for the second entry"
  source-file: "test-relocation-table.scm"
  source-line: 136
  source-form: (test-assert "r_offset should be correct for the second entry" (= 8 (bytevector-u64-ref table 24 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_info should be correct for the second entry (R_X86_64_PC32)"
  source-file: "test-relocation-table.scm"
  source-line: 138
  source-form: (test-assert "r_info should be correct for the second entry (R_X86_64_PC32)" (= 8589934594 (bytevector-u64-ref table 32 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_addend should be zero for the second entry"
  source-file: "test-relocation-table.scm"
  source-line: 140
  source-form: (test-assert "r_addend should be zero for the second entry" (= 0 (bytevector-u64-ref table 40 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_offset should be correct for the third entry"
  source-file: "test-relocation-table.scm"
  source-line: 144
  source-form: (test-assert "r_offset should be correct for the third entry" (= 16 (bytevector-u64-ref table 48 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_info should be correct for the third entry (R_X86_64_GOT32)"
  source-file: "test-relocation-table.scm"
  source-line: 146
  source-form: (test-assert "r_info should be correct for the third entry (R_X86_64_GOT32)" (= 12884901891 (bytevector-u64-ref table 56 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_addend should be zero for the third entry"
  source-file: "test-relocation-table.scm"
  source-line: 148
  source-form: (test-assert "r_addend should be zero for the third entry" (= 0 (bytevector-u64-ref table 64 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_offset should be correct for the fourth entry"
  source-file: "test-relocation-table.scm"
  source-line: 152
  source-form: (test-assert "r_offset should be correct for the fourth entry" (= 24 (bytevector-u64-ref table 72 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_info should be correct for the fourth entry (R_X86_64_PLT32)"
  source-file: "test-relocation-table.scm"
  source-line: 154
  source-form: (test-assert "r_info should be correct for the fourth entry (R_X86_64_PLT32)" (= 17179869188 (bytevector-u64-ref table 80 little)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "r_addend should be zero for the fourth entry"
  source-file: "test-relocation-table.scm"
  source-line: 156
  source-form: (test-assert "r_addend should be zero for the fourth entry" (= 0 (bytevector-u64-ref table 88 little)))
Test end:
  result-kind: pass
  actual-value: #t
Group end: create-relocation-table-comprehensive
# of expected passes      35
