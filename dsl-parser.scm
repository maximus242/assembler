(define-module (dsl-parser)
  #:use-module (ice-9 match)
  #:use-module (srfi srfi-1)
  #:export (parse-dsl))

(define (valid-instruction? inst)
  (and (list? inst)
       (> (length inst) 0)
       (or (symbol? (car inst))
           (and (= (length inst) 2)
                (eq? (car inst) 'label)
                (symbol? (cadr inst))))))

(define (parse-operand op)
  (cond
    ((symbol? op) op)
    ((number? op) op)
    ((and (list? op) (= (length op) 1)) (list 'mem (car op)))
    (else (error "Invalid operand" op))))

(define (parse-instruction inst)
  (match inst
    (('label name) `(label ,name))
    (('mov dest src) `(mov ,(parse-operand dest) ,(parse-operand src)))
    (('mov.imm32 dest src) `(mov.imm32 ,(parse-operand dest) ,(parse-operand src)))
    (('add dest src) `(add ,(parse-operand dest) ,(parse-operand src)))
    (('sub dest src) `(sub ,(parse-operand dest) ,(parse-operand src)))
    (('mul src) `(mul ,(parse-operand src)))
    (('div src) `(div ,(parse-operand src)))
    (('push src) `(push ,(parse-operand src)))
    (('pop dest) `(pop ,(parse-operand dest)))
    (('ret) '(ret))
    (('vmovaps dest src) `(vmovaps ,(parse-operand dest) ,(parse-operand src)))
    (('vaddps dest src1 src2) `(vaddps ,(parse-operand dest) ,(parse-operand src1) ,(parse-operand src2)))
    (('vfmadd132ps dest src1 src2) `(vfmadd132ps ,(parse-operand dest) ,(parse-operand src1) ,(parse-operand src2)))
    (('vxorps dest src1 src2) `(vxorps ,(parse-operand dest) ,(parse-operand src1) ,(parse-operand src2)))
    (('xor dest src) `(xor ,(parse-operand dest) ,(parse-operand src)))
    (('syscall) '(syscall))
    (_ (error "Invalid instruction" inst))))

(define (parse-dsl code)
  (if (and (list? code) (eq? (car code) 'program))
      (map (lambda (inst)
             (if (valid-instruction? inst)
                 (parse-instruction inst)
                 (error "Invalid instruction format" inst)))
           (cdr code))
      (error "Invalid program format" code)))
