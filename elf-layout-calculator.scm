(define-module (elf-layout-calculator)
  #:use-module (config)
  #:use-module (utils)
  #:use-module (rnrs bytevectors)
  #:use-module (symbol-table)
  #:use-module (string-table)
  #:use-module (relocation-table)
  #:export (calculate-elf-layout))

(define (calculate-elf-layout code data-sections symbol-addresses)
  ;; Debug print statements to ensure variables are imported correctly
  (format #t "elf-header-size: ~a~%" elf-header-size)
  (format #t "entry-point: ~a~%" entry-point)
  (format #t "code-offset: ~a~%" code-offset)
  (format #t "alignment: ~a~%" alignment)
  (format #t "dynamic-entry-size: ~a~%" dynamic-entry-size)
  (format #t "got-entry-size: ~a~%" got-entry-size)
  (format #t "section-header-size: ~a~%" section-header-size)
  (format #t "program-header-size: ~a~%" program-header-size)
  (format #t "num-sections: ~a~%" num-sections)
  (format #t "text-addr: ~a~%" text-addr)
  (format #t "section-offset: ~a~%" section-offset)

  (let* ((program-headers-offset elf-header-size)
         (code-size (bytevector-length code))
         (data-size (apply + (map (lambda (pair) (bytevector-length (cdr pair))) data-sections)))
         (symtab (create-symbol-table symbol-addresses))
         (symtab-size (bytevector-length symtab))
         (strtab (create-string-table symbol-addresses))
         (strtab-size (bytevector-length strtab))
         (shstrtab (create-section-header-string-table))
         (shstrtab-size (bytevector-length shstrtab))
         (dynamic-symbol-table (create-dynamic-symbol-table symbol-addresses))
         (dynamic-symbol-table-size (bytevector-length dynamic-symbol-table))
         (relocation-table (create-relocation-table symbol-addresses))
         (relocation-table-size (bytevector-length relocation-table))
         (got-size (* (length symbol-addresses) got-entry-size))
         (data-offset (align-to (+ code-offset code-size) alignment))
         (dynamic-offset (align-to (+ data-offset data-size) alignment))
         (dynamic-size (* 8 dynamic-entry-size))
         (dynsym-offset (align-to (+ dynamic-offset dynamic-size) 8))
         (dynstr-offset (align-to (+ dynsym-offset dynamic-symbol-table-size) 8))
         (rela-offset (align-to (+ dynstr-offset strtab-size) 8))
         (got-offset (align-to (+ rela-offset relocation-table-size) 8))
         (plt-offset (align-to (+ got-offset got-size) 16))
         (total-dynamic-size (- plt-offset dynamic-offset))
         (section-headers-offset (align-to (+ dynamic-offset total-dynamic-size) alignment))
         (shstrtab-addr (- section-headers-offset shstrtab-size)))  ; Calculate shstrtab-addr

    ;; Section header calculations
    (let* ((data-addr (+ text-addr (align-to code-size alignment)))
           (dynamic-addr (align-to (+ data-addr data-size) alignment))
           (dynsym-addr (+ dynamic-addr dynamic-size))
           (dynstr-addr (+ dynsym-addr dynamic-symbol-table-size))
           (rela-addr rela-offset)
           (got-addr (align-to (+ rela-addr relocation-table-size) 8))
           (plt-addr (+ got-addr got-size))
           (symtab-offset (+ section-offset code-size data-size))
           (total-size (+ section-headers-offset (* num-sections section-header-size)))
           (strtab-offset (+ symtab-offset symtab-size)))

      (list
        (cons 'program-headers-offset program-headers-offset)
        (cons 'code-size code-size)
        (cons 'data-size data-size)
        (cons 'symtab-size symtab-size)
        (cons 'strtab-size strtab-size)
        (cons 'shstrtab-size shstrtab-size)
        (cons 'dynamic-symbol-table-size dynamic-symbol-table-size)
        (cons 'relocation-table-size relocation-table-size)
        (cons 'got-size got-size)
        (cons 'data-offset data-offset)
        (cons 'dynamic-offset dynamic-offset)
        (cons 'dynamic-size dynamic-size)
        (cons 'dynsym-offset dynsym-offset)
        (cons 'dynstr-offset dynstr-offset)
        (cons 'rela-offset rela-offset)
        (cons 'got-offset got-offset)
        (cons 'plt-offset plt-offset)
        (cons 'total-dynamic-size total-dynamic-size)
        (cons 'section-headers-offset section-headers-offset)
        (cons 'shstrtab-addr shstrtab-addr)  ; Add this line
        ;; Section header variables
        (cons 'data-addr data-addr)
        (cons 'dynamic-addr dynamic-addr)
        (cons 'dynsym-addr dynsym-addr)
        (cons 'dynstr-addr dynstr-addr)
        (cons 'rela-addr rela-addr)
        (cons 'got-addr got-addr)
        (cons 'plt-addr plt-addr)
        (cons 'symtab-offset symtab-offset)
        (cons 'total-size total-size)
        (cons 'strtab-offset strtab-offset)))))
