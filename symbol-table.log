%%%% Starting test symbol-table
Group begin: symbol-table
Group begin: make-symbol-table
Test begin:
  test-name: "symbol table is a hash-table"
  source-file: "test-symbol-table.scm"
  source-line: 11
  source-form: (test-assert "symbol table is a hash-table" (hash-table? (make-symbol-table)))
Test end:
  result-kind: pass
  actual-value: #t
Group end: make-symbol-table
Group begin: add-symbol! and get-symbol
Test begin:
  test-name: "symbol1 should be in the table with the correct address"
  source-file: "test-symbol-table.scm"
  source-line: 18
  source-form: (test-equal "symbol1 should be in the table with the correct address" 4096 (get-symbol table (quote symbol1)))
Test end:
  result-kind: pass
  actual-value: 4096
  expected-value: 4096
Test begin:
  test-name: "non-existent symbol should return #f"
  source-file: "test-symbol-table.scm"
  source-line: 20
  source-form: (test-assert "non-existent symbol should return #f" (not (get-symbol table (quote symbol2))))
Test end:
  result-kind: pass
  actual-value: #t
Group end: add-symbol! and get-symbol
Group begin: label-symbols
Test begin:
  test-name: "Add label symbol"
  source-file: "test-symbol-table.scm"
  source-line: 26
  source-form: (test-assert "Add label symbol" (begin (add-label-symbol! table (quote main) 4096) (get-symbol table (quote main))))
Test end:
  result-kind: pass
  actual-value: 4096
Test begin:
  test-name: "Get label symbol address"
  source-file: "test-symbol-table.scm"
  source-line: 31
  source-form: (test-eqv "Get label symbol address" 4096 (get-symbol table (quote main)))
Test end:
  result-kind: pass
  actual-value: 4096
  expected-value: 4096
Test begin:
  test-name: "Label symbol should be in symbol table"
  source-file: "test-symbol-table.scm"
  source-line: 35
  source-form: (test-assert "Label symbol should be in symbol table" (symbol-in-table? table (quote main)))
Test end:
  result-kind: pass
  actual-value: (4096 . #t)
Test begin:
  test-name: "Label symbol should be marked as a function"
  source-file: "test-symbol-table.scm"
  source-line: 38
  source-form: (test-assert "Label symbol should be marked as a function" (symbol-is-function? table (quote main)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "Data symbol should not be marked as a function"
  source-file: "test-symbol-table.scm"
  source-line: 41
  source-form: (test-assert "Data symbol should not be marked as a function" (begin (add-symbol! table (quote data1) 8192) (not (symbol-is-function? table (quote data1)))))
Test end:
  result-kind: pass
  actual-value: #t
Group end: label-symbols
Group begin: create-symbol-table
Test begin:
  test-name: "data symbols should be in the table"
  source-file: "test-symbol-table.scm"
  source-line: 51
  source-form: (test-assert "data symbols should be in the table" (and (symbol-in-table? sym-table (quote symbol1)) (symbol-in-table? sym-table (quote symbol2))))
Test end:
  result-kind: pass
  actual-value: (8192 . #f)
Test begin:
  test-name: "label symbols should be in the table"
  source-file: "test-symbol-table.scm"
  source-line: 54
  source-form: (test-assert "label symbols should be in the table" (and (symbol-in-table? sym-table (quote main)) (symbol-in-table? sym-table (quote func1))))
Test end:
  result-kind: pass
  actual-value: (12544 . #t)
Test begin:
  test-name: "label symbols should be marked as functions"
  source-file: "test-symbol-table.scm"
  source-line: 57
  source-form: (test-assert "label symbols should be marked as functions" (and (symbol-is-function? sym-table (quote main)) (symbol-is-function? sym-table (quote func1))))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "data symbols should not be marked as functions"
  source-file: "test-symbol-table.scm"
  source-line: 60
  source-form: (test-assert "data symbols should not be marked as functions" (and (not (symbol-is-function? sym-table (quote symbol1))) (not (symbol-is-function? sym-table (quote symbol2)))))
Test end:
  result-kind: pass
  actual-value: #t
Group end: create-symbol-table
Group begin: create-dynamic-symbol-table
Test begin:
  test-name: "dynamic symbol table bytevector should be of the correct size"
  source-file: "test-symbol-table.scm"
  source-line: 70
  source-form: (test-assert "dynamic symbol table bytevector should be of the correct size" (= (bytevector-length dynsym-table) (* (+ (length symbol-addresses) (length label-positions) 1) 24)))
Test end:
  result-kind: fail
  actual-value: #f
  actual-error: (wrong-type-arg "bv-length" "Wrong type argument in position 1 (expecting bytevector): ~S" ((#vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 17 0 2 0 0 16 0 0 0 0 0 0 32 0 0 0 0 0 0 0 9 0 0 0 18 0 1 0 0 49 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 17 0 2 0 0 32 0 0 0 0 0 0 32 0 0 0 0 0 0 0 23 0 0 0 18 0 1 0 0 48 0 0 0 0 0 0 0 0 0 0 0 0 0 0) . #vu8(0 115 121 109 98 111 108 49 0 102 117 110 99 49 0 115 121 109 98 111 108 50 0 109 97 105 110 0))) ((#vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 17 0 2 0 0 16 0 0 0 0 0 0 32 0 0 0 0 0 0 0 9 0 0 0 18 0 1 0 0 49 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 17 0 2 0 0 32 0 0 0 0 0 0 32 0 0 0 0 0 0 0 23 0 0 0 18 0 1 0 0 48 0 0 0 0 0 0 0 0 0 0 0 0 0 0) . #vu8(0 115 121 109 98 111 108 49 0 102 117 110 99 49 0 115 121 109 98 111 108 50 0 109 97 105 110 0))))
Test begin:
  test-name: "first entry name offset should be zero"
  source-file: "test-symbol-table.scm"
  source-line: 72
  source-form: (test-equal "first entry name offset should be zero" 0 (bytevector-u32-ref dynsym-table 0 little))
Test end:
  result-kind: fail
  actual-value: #f
  actual-error: (wrong-type-arg "bytevector-u32-ref" "Wrong type argument in position ~A (expecting ~A): ~S" (1 "bytevector" (#vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 17 0 2 0 0 16 0 0 0 0 0 0 32 0 0 0 0 0 0 0 9 0 0 0 18 0 1 0 0 49 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 17 0 2 0 0 32 0 0 0 0 0 0 32 0 0 0 0 0 0 0 23 0 0 0 18 0 1 0 0 48 0 0 0 0 0 0 0 0 0 0 0 0 0 0) . #vu8(0 115 121 109 98 111 108 49 0 102 117 110 99 49 0 115 121 109 98 111 108 50 0 109 97 105 110 0))) ((#vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 17 0 2 0 0 16 0 0 0 0 0 0 32 0 0 0 0 0 0 0 9 0 0 0 18 0 1 0 0 49 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 17 0 2 0 0 32 0 0 0 0 0 0 32 0 0 0 0 0 0 0 23 0 0 0 18 0 1 0 0 48 0 0 0 0 0 0 0 0 0 0 0 0 0 0) . #vu8(0 115 121 109 98 111 108 49 0 102 117 110 99 49 0 115 121 109 98 111 108 50 0 109 97 105 110 0))))
  expected-value: 0
Test begin:
  test-name: "first entry info should be zero"
  source-file: "test-symbol-table.scm"
  source-line: 74
  source-form: (test-equal "first entry info should be zero" 0 (bytevector-u8-ref dynsym-table 4))
Test end:
  result-kind: fail
  actual-value: #f
  actual-error: (wrong-type-arg "bytevector-u8-ref" "Wrong type argument in position 1 (expecting bytevector): ~S" ((#vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 17 0 2 0 0 16 0 0 0 0 0 0 32 0 0 0 0 0 0 0 9 0 0 0 18 0 1 0 0 49 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 17 0 2 0 0 32 0 0 0 0 0 0 32 0 0 0 0 0 0 0 23 0 0 0 18 0 1 0 0 48 0 0 0 0 0 0 0 0 0 0 0 0 0 0) . #vu8(0 115 121 109 98 111 108 49 0 102 117 110 99 49 0 115 121 109 98 111 108 50 0 109 97 105 110 0))) ((#vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 17 0 2 0 0 16 0 0 0 0 0 0 32 0 0 0 0 0 0 0 9 0 0 0 18 0 1 0 0 49 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 17 0 2 0 0 32 0 0 0 0 0 0 32 0 0 0 0 0 0 0 23 0 0 0 18 0 1 0 0 48 0 0 0 0 0 0 0 0 0 0 0 0 0 0) . #vu8(0 115 121 109 98 111 108 49 0 102 117 110 99 49 0 115 121 109 98 111 108 50 0 109 97 105 110 0))))
  expected-value: 0
Group end: create-dynamic-symbol-table
Group begin: create-dynamic-symbol-table-edge-cases
Test begin:
  test-name: "dynamic symbol table should handle maximum address value"
  source-file: "test-symbol-table.scm"
  source-line: 85
  source-form: (test-equal "dynamic symbol table should handle maximum address value" max-address (bytevector-u64-ref dynsym-table 32 little))
Test end:
  result-kind: fail
  actual-value: #f
  actual-error: (wrong-type-arg "bytevector-u64-ref" "Wrong type argument in position ~A (expecting ~A): ~S" (1 "bytevector" (#vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 17 0 2 0 255 255 255 255 255 255 255 255 32 0 0 0 0 0 0 0 9 0 0 0 18 0 1 0 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0) . #vu8(0 115 121 109 98 111 108 49 0 109 97 105 110 0))) ((#vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 17 0 2 0 255 255 255 255 255 255 255 255 32 0 0 0 0 0 0 0 9 0 0 0 18 0 1 0 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0) . #vu8(0 115 121 109 98 111 108 49 0 109 97 105 110 0))))
  expected-value: 18446744073709551615
Test begin:
  test-name: "dynamic symbol table should handle endianness correctly"
  source-file: "test-symbol-table.scm"
  source-line: 94
  source-form: (test-equal "dynamic symbol table should handle endianness correctly" test-address (bytevector-u64-ref dynsym-table 32 little))
Test end:
  result-kind: fail
  actual-value: #f
  actual-error: (wrong-type-arg "bytevector-u64-ref" "Wrong type argument in position ~A (expecting ~A): ~S" (1 "bytevector" (#vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 17 0 2 0 8 7 6 5 4 3 2 1 32 0 0 0 0 0 0 0 9 0 0 0 18 0 1 0 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0) . #vu8(0 115 121 109 98 111 108 49 0 109 97 105 110 0))) ((#vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 17 0 2 0 8 7 6 5 4 3 2 1 32 0 0 0 0 0 0 0 9 0 0 0 18 0 1 0 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0) . #vu8(0 115 121 109 98 111 108 49 0 109 97 105 110 0))))
  expected-value: 72623859790382856
Group end: create-dynamic-symbol-table-edge-cases
Group begin: create-hash-section
Group end: create-hash-section
